{"repository_name":"github.com/j8r/crystal-open-simplex-noise","body":"# Open Simplex Noise\n\n[![Build Status](https://cloud.drone.io/api/badges/j8r/crystal-open-simplex-noise/status.svg)](https://cloud.drone.io/j8r/crystal-open-simplex-noise)\n\nThis is an implementation of 2D, 3D, and 4D open simplex noise in crystal.\n\nOriginal work by [doughsay](https://github.com/doughsay/crystal-open-simplex-noise).\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yml\ndependencies:\n  open-simplex-noise:\n    github: j8r/crystal-open-simplex-noise\n```\n\n## Usage\n\n```crystal\nrequire \"open-simplex-noise\"\n```\n\nInstantiate a noise generator using an `Int64` seed:\n\n```crystal\nnoise = OpenSimplexNoise.new(12345_i64)\n```\n\nUse the `generate` method, passing in either 2, 3, or 4 `Float64`s to generate noise:\n\n```crystal\nnoise.generate(1.0, 2.0) #=> -0.08284024020120388\n```\n\n## Documentation\n\nhttps://j8r.github.io/crystal-open-simplex-noise\n\n## Examples\n\n2D Noise:\n\n![2d-noise](examples/output/noise2d.png)\n\n3D Noise (2D slice):\n\n![3d-noise](examples/output/noise3d.png)\n\n4D Noise (2D slice):\n\n![3d-noise](examples/output/noise4d.png)\n\n## Credits\n\n[doughsay](https://github.com/doughsay) Chris Dos√© - original creator\n\nThis is mostly just a transliteration of the Python version from here: https://github.com/lmas/opensimplex, which itself is a transliteration of Kurt Spencer's original code (released to the public domain).\n\n## License\n\n[MIT](LICENSE.md)\n","program":{"html_id":"github.com/j8r/crystal-open-simplex-noise/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/j8r/crystal-open-simplex-noise","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/j8r/crystal-open-simplex-noise/OpenSimplexNoise","path":"OpenSimplexNoise.html","kind":"struct","full_name":"OpenSimplexNoise","name":"OpenSimplexNoise","abstract":false,"superclass":{"html_id":"github.com/j8r/crystal-open-simplex-noise/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/j8r/crystal-open-simplex-noise/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/j8r/crystal-open-simplex-noise/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/j8r/crystal-open-simplex-noise/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"constants.cr","line_number":1,"url":"https://github.com/j8r/crystal-open-simplex-noise/blob/db1d122659a03713319db15b4479c679d29070bd/src/constants.cr"},{"filename":"2d.cr","line_number":3,"url":"https://github.com/j8r/crystal-open-simplex-noise/blob/db1d122659a03713319db15b4479c679d29070bd/src/2d.cr"},{"filename":"3d.cr","line_number":3,"url":"https://github.com/j8r/crystal-open-simplex-noise/blob/db1d122659a03713319db15b4479c679d29070bd/src/3d.cr"},{"filename":"4d.cr","line_number":3,"url":"https://github.com/j8r/crystal-open-simplex-noise/blob/db1d122659a03713319db15b4479c679d29070bd/src/4d.cr"},{"filename":"open-simplex-noise.cr","line_number":5,"url":"https://github.com/j8r/crystal-open-simplex-noise/blob/db1d122659a03713319db15b4479c679d29070bd/src/open-simplex-noise.cr"}],"repository_name":"github.com/j8r/crystal-open-simplex-noise","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(seed:Int64=0_i64)-class-method","html_id":"new(seed:Int64=0_i64)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"seed","doc":null,"default_value":"0_i64","external_name":"seed","restriction":"Int64"}],"args_string":"(seed : Int64 = <span class=\"n\">0_i64</span>)","source_link":"https://github.com/j8r/crystal-open-simplex-noise/blob/db1d122659a03713319db15b4479c679d29070bd/src/open-simplex-noise.cr#L6","def":{"name":"new","args":[{"name":"seed","doc":null,"default_value":"0_i64","external_name":"seed","restriction":"Int64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(seed)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"generate(x:Float64,y:Float64,z:Float64,w:Float64):Float64-instance-method","html_id":"generate(x:Float64,y:Float64,z:Float64,w:Float64):Float64-instance-method","name":"generate","doc":"Generate 4D OpenSimplex noise from X,Y,Z,W coordinates.","summary":"<p>Generate 4D OpenSimplex noise from X,Y,Z,W coordinates.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float64"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"Float64"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"Float64"},{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Float64"}],"args_string":"(x : Float64, y : Float64, z : Float64, w : Float64) : Float64","source_link":"https://github.com/j8r/crystal-open-simplex-noise/blob/db1d122659a03713319db15b4479c679d29070bd/src/4d.cr#L11","def":{"name":"generate","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float64"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"Float64"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"Float64"},{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"stretch_offset = (((x + y) + z) + w) * STRETCH_CONSTANT_4D\nxs = x + stretch_offset\nys = y + stretch_offset\nzs = z + stretch_offset\nws = w + stretch_offset\nxsb = xs.floor.to_i\nysb = ys.floor.to_i\nzsb = zs.floor.to_i\nwsb = ws.floor.to_i\nsquish_offset = (((xsb + ysb) + zsb) + wsb) * SQUISH_CONSTANT_4D\nxb = xsb + squish_offset\nyb = ysb + squish_offset\nzb = zsb + squish_offset\nwb = wsb + squish_offset\nxins = xs - xsb\nyins = ys - ysb\nzins = zs - zsb\nwins = ws - wsb\nin_sum = ((xins + yins) + zins) + wins\ndx0 = x - xb\ndy0 = y - yb\ndz0 = z - zb\ndw0 = w - wb\nvalue = 0\nif in_sum <= 1\n  a_po = 1\n  a_score = xins\n  b_po = 2\n  b_score = yins\n  if a_score >= b_score && zins > b_score\n    b_score = zins\n    b_po = 4\n  else\n    if a_score < b_score && zins > a_score\n      a_score = zins\n      a_po = 4\n    end\n  end\n  if a_score >= b_score && wins > b_score\n    b_score = wins\n    b_po = 8\n  else\n    if a_score < b_score && wins > a_score\n      a_score = wins\n      a_po = 8\n    end\n  end\n  uins = 1 - in_sum\n  if uins > a_score || uins > b_score\n    c = b_score > a_score ? b_po : a_po\n    if (c & 1) == 0\n      xsv_ext0 = xsb - 1\n      xsv_ext1 = xsv_ext2 = xsb\n      dx_ext0 = dx0 + 1\n      dx_ext1 = dx_ext2 = dx0\n    else\n      xsv_ext0 = xsv_ext1 = xsv_ext2 = xsb + 1\n      dx_ext0 = dx_ext1 = dx_ext2 = dx0 - 1\n    end\n    if (c & 2) == 0\n      ysv_ext0 = ysv_ext1 = ysv_ext2 = ysb\n      dy_ext0 = dy_ext1 = dy_ext2 = dy0\n      if (c & 1) == 1\n        ysv_ext0 = ysv_ext0 - 1\n        dy_ext0 = dy_ext0 + 1\n      else\n        ysv_ext1 = ysv_ext1 - 1\n        dy_ext1 = dy_ext1 + 1\n      end\n    else\n      ysv_ext0 = ysv_ext1 = ysv_ext2 = ysb + 1\n      dy_ext0 = dy_ext1 = dy_ext2 = dy0 - 1\n    end\n    if (c & 4) == 0\n      zsv_ext0 = zsv_ext1 = zsv_ext2 = zsb\n      dz_ext0 = dz_ext1 = dz_ext2 = dz0\n      if (c & 3) != 0\n        if (c & 3) == 3\n          zsv_ext0 = zsv_ext0 - 1\n          dz_ext0 = dz_ext0 + 1\n        else\n          zsv_ext1 = zsv_ext1 - 1\n          dz_ext1 = dz_ext1 + 1\n        end\n      else\n        zsv_ext2 = zsv_ext2 - 1\n        dz_ext2 = dz_ext2 + 1\n      end\n    else\n      zsv_ext0 = zsv_ext1 = zsv_ext2 = zsb + 1\n      dz_ext0 = dz_ext1 = dz_ext2 = dz0 - 1\n    end\n    if (c & 8) == 0\n      wsv_ext0 = wsv_ext1 = wsb\n      wsv_ext2 = wsb - 1\n      dw_ext0 = dw_ext1 = dw0\n      dw_ext2 = dw0 + 1\n    else\n      wsv_ext0 = wsv_ext1 = wsv_ext2 = wsb + 1\n      dw_ext0 = dw_ext1 = dw_ext2 = dw0 - 1\n    end\n  else\n    c = (a_po | b_po)\n    if (c & 1) == 0\n      xsv_ext0 = xsv_ext2 = xsb\n      xsv_ext1 = xsb - 1\n      dx_ext0 = dx0 - (2 * SQUISH_CONSTANT_4D)\n      dx_ext1 = (dx0 + 1) - SQUISH_CONSTANT_4D\n      dx_ext2 = dx0 - SQUISH_CONSTANT_4D\n    else\n      xsv_ext0 = xsv_ext1 = xsv_ext2 = xsb + 1\n      dx_ext0 = (dx0 - 1) - (2 * SQUISH_CONSTANT_4D)\n      dx_ext1 = dx_ext2 = (dx0 - 1) - SQUISH_CONSTANT_4D\n    end\n    if (c & 2) == 0\n      ysv_ext0 = ysv_ext1 = ysv_ext2 = ysb\n      dy_ext0 = dy0 - (2 * SQUISH_CONSTANT_4D)\n      dy_ext1 = dy_ext2 = dy0 - SQUISH_CONSTANT_4D\n      if (c & 1) == 1\n        ysv_ext1 = ysv_ext1 - 1\n        dy_ext1 = dy_ext1 + 1\n      else\n        ysv_ext2 = ysv_ext2 - 1\n        dy_ext2 = dy_ext2 + 1\n      end\n    else\n      ysv_ext0 = ysv_ext1 = ysv_ext2 = ysb + 1\n      dy_ext0 = (dy0 - 1) - (2 * SQUISH_CONSTANT_4D)\n      dy_ext1 = dy_ext2 = (dy0 - 1) - SQUISH_CONSTANT_4D\n    end\n    if (c & 4) == 0\n      zsv_ext0 = zsv_ext1 = zsv_ext2 = zsb\n      dz_ext0 = dz0 - (2 * SQUISH_CONSTANT_4D)\n      dz_ext1 = dz_ext2 = dz0 - SQUISH_CONSTANT_4D\n      if (c & 3) == 3\n        zsv_ext1 = zsv_ext1 - 1\n        dz_ext1 = dz_ext1 + 1\n      else\n        zsv_ext2 = zsv_ext2 - 1\n        dz_ext2 = dz_ext2 + 1\n      end\n    else\n      zsv_ext0 = zsv_ext1 = zsv_ext2 = zsb + 1\n      dz_ext0 = (dz0 - 1) - (2 * SQUISH_CONSTANT_4D)\n      dz_ext1 = dz_ext2 = (dz0 - 1) - SQUISH_CONSTANT_4D\n    end\n    if (c & 8) == 0\n      wsv_ext0 = wsv_ext1 = wsb\n      wsv_ext2 = wsb - 1\n      dw_ext0 = dw0 - (2 * SQUISH_CONSTANT_4D)\n      dw_ext1 = dw0 - SQUISH_CONSTANT_4D\n      dw_ext2 = (dw0 + 1) - SQUISH_CONSTANT_4D\n    else\n      wsv_ext0 = wsv_ext1 = wsv_ext2 = wsb + 1\n      dw_ext0 = (dw0 - 1) - (2 * SQUISH_CONSTANT_4D)\n      dw_ext1 = dw_ext2 = (dw0 - 1) - SQUISH_CONSTANT_4D\n    end\n  end\n  attn0 = (((2 - (dx0 * dx0)) - (dy0 * dy0)) - (dz0 * dz0)) - (dw0 * dw0)\n  if attn0 > 0\n    attn0 = attn0 * attn0\n    value = value + ((attn0 * attn0) * (extrapolate(xsb + 0, ysb + 0, zsb + 0, wsb + 0, dx0, dy0, dz0, dw0)))\n  end\n  dx1 = (dx0 - 1) - SQUISH_CONSTANT_4D\n  dy1 = (dy0 - 0) - SQUISH_CONSTANT_4D\n  dz1 = (dz0 - 0) - SQUISH_CONSTANT_4D\n  dw1 = (dw0 - 0) - SQUISH_CONSTANT_4D\n  attn1 = (((2 - (dx1 * dx1)) - (dy1 * dy1)) - (dz1 * dz1)) - (dw1 * dw1)\n  if attn1 > 0\n    attn1 = attn1 * attn1\n    value = value + ((attn1 * attn1) * (extrapolate(xsb + 1, ysb + 0, zsb + 0, wsb + 0, dx1, dy1, dz1, dw1)))\n  end\n  dx2 = (dx0 - 0) - SQUISH_CONSTANT_4D\n  dy2 = (dy0 - 1) - SQUISH_CONSTANT_4D\n  dz2 = dz1\n  dw2 = dw1\n  attn2 = (((2 - (dx2 * dx2)) - (dy2 * dy2)) - (dz2 * dz2)) - (dw2 * dw2)\n  if attn2 > 0\n    attn2 = attn2 * attn2\n    value = value + ((attn2 * attn2) * (extrapolate(xsb + 0, ysb + 1, zsb + 0, wsb + 0, dx2, dy2, dz2, dw2)))\n  end\n  dx3 = dx2\n  dy3 = dy1\n  dz3 = (dz0 - 1) - SQUISH_CONSTANT_4D\n  dw3 = dw1\n  attn3 = (((2 - (dx3 * dx3)) - (dy3 * dy3)) - (dz3 * dz3)) - (dw3 * dw3)\n  if attn3 > 0\n    attn3 = attn3 * attn3\n    value = value + ((attn3 * attn3) * (extrapolate(xsb + 0, ysb + 0, zsb + 1, wsb + 0, dx3, dy3, dz3, dw3)))\n  end\n  dx4 = dx2\n  dy4 = dy1\n  dz4 = dz1\n  dw4 = (dw0 - 1) - SQUISH_CONSTANT_4D\n  attn4 = (((2 - (dx4 * dx4)) - (dy4 * dy4)) - (dz4 * dz4)) - (dw4 * dw4)\n  if attn4 > 0\n    attn4 = attn4 * attn4\n    value = value + ((attn4 * attn4) * (extrapolate(xsb + 0, ysb + 0, zsb + 0, wsb + 1, dx4, dy4, dz4, dw4)))\n  end\nelse\n  if in_sum >= 3\n    a_po = 14\n    a_score = xins\n    b_po = 13\n    b_score = yins\n    if a_score <= b_score && zins < b_score\n      b_score = zins\n      b_po = 11\n    else\n      if a_score > b_score && zins < a_score\n        a_score = zins\n        a_po = 11\n      end\n    end\n    if a_score <= b_score && wins < b_score\n      b_score = wins\n      b_po = 7\n    else\n      if a_score > b_score && wins < a_score\n        a_score = wins\n        a_po = 7\n      end\n    end\n    uins = 4 - in_sum\n    if uins < a_score || uins < b_score\n      c = b_score < a_score ? b_po : a_po\n      if (c & 1) != 0\n        xsv_ext0 = xsb + 2\n        xsv_ext1 = xsv_ext2 = xsb + 1\n        dx_ext0 = (dx0 - 2) - (4 * SQUISH_CONSTANT_4D)\n        dx_ext1 = dx_ext2 = (dx0 - 1) - (4 * SQUISH_CONSTANT_4D)\n      else\n        xsv_ext0 = xsv_ext1 = xsv_ext2 = xsb\n        dx_ext0 = dx_ext1 = dx_ext2 = dx0 - (4 * SQUISH_CONSTANT_4D)\n      end\n      if (c & 2) != 0\n        ysv_ext0 = ysv_ext1 = ysv_ext2 = ysb + 1\n        dy_ext0 = dy_ext1 = dy_ext2 = (dy0 - 1) - (4 * SQUISH_CONSTANT_4D)\n        if (c & 1) != 0\n          ysv_ext1 = ysv_ext1 + 1\n          dy_ext1 = dy_ext1 - 1\n        else\n          ysv_ext0 = ysv_ext0 + 1\n          dy_ext0 = dy_ext0 - 1\n        end\n      else\n        ysv_ext0 = ysv_ext1 = ysv_ext2 = ysb\n        dy_ext0 = dy_ext1 = dy_ext2 = dy0 - (4 * SQUISH_CONSTANT_4D)\n      end\n      if (c & 4) != 0\n        zsv_ext0 = zsv_ext1 = zsv_ext2 = zsb + 1\n        dz_ext0 = dz_ext1 = dz_ext2 = (dz0 - 1) - (4 * SQUISH_CONSTANT_4D)\n        if (c & 3) != 3\n          if (c & 3) == 0\n            zsv_ext0 = zsv_ext0 + 1\n            dz_ext0 = dz_ext0 - 1\n          else\n            zsv_ext1 = zsv_ext1 + 1\n            dz_ext1 = dz_ext1 - 1\n          end\n        else\n          zsv_ext2 = zsv_ext2 + 1\n          dz_ext2 = dz_ext2 - 1\n        end\n      else\n        zsv_ext0 = zsv_ext1 = zsv_ext2 = zsb\n        dz_ext0 = dz_ext1 = dz_ext2 = dz0 - (4 * SQUISH_CONSTANT_4D)\n      end\n      if (c & 8) != 0\n        wsv_ext0 = wsv_ext1 = wsb + 1\n        wsv_ext2 = wsb + 2\n        dw_ext0 = dw_ext1 = (dw0 - 1) - (4 * SQUISH_CONSTANT_4D)\n        dw_ext2 = (dw0 - 2) - (4 * SQUISH_CONSTANT_4D)\n      else\n        wsv_ext0 = wsv_ext1 = wsv_ext2 = wsb\n        dw_ext0 = dw_ext1 = dw_ext2 = dw0 - (4 * SQUISH_CONSTANT_4D)\n      end\n    else\n      c = (a_po & b_po)\n      if (c & 1) != 0\n        xsv_ext0 = xsv_ext2 = xsb + 1\n        xsv_ext1 = xsb + 2\n        dx_ext0 = (dx0 - 1) - (2 * SQUISH_CONSTANT_4D)\n        dx_ext1 = (dx0 - 2) - (3 * SQUISH_CONSTANT_4D)\n        dx_ext2 = (dx0 - 1) - (3 * SQUISH_CONSTANT_4D)\n      else\n        xsv_ext0 = xsv_ext1 = xsv_ext2 = xsb\n        dx_ext0 = dx0 - (2 * SQUISH_CONSTANT_4D)\n        dx_ext1 = dx_ext2 = dx0 - (3 * SQUISH_CONSTANT_4D)\n      end\n      if (c & 2) != 0\n        ysv_ext0 = ysv_ext1 = ysv_ext2 = ysb + 1\n        dy_ext0 = (dy0 - 1) - (2 * SQUISH_CONSTANT_4D)\n        dy_ext1 = dy_ext2 = (dy0 - 1) - (3 * SQUISH_CONSTANT_4D)\n        if (c & 1) != 0\n          ysv_ext2 = ysv_ext2 + 1\n          dy_ext2 = dy_ext2 - 1\n        else\n          ysv_ext1 = ysv_ext1 + 1\n          dy_ext1 = dy_ext1 - 1\n        end\n      else\n        ysv_ext0 = ysv_ext1 = ysv_ext2 = ysb\n        dy_ext0 = dy0 - (2 * SQUISH_CONSTANT_4D)\n        dy_ext1 = dy_ext2 = dy0 - (3 * SQUISH_CONSTANT_4D)\n      end\n      if (c & 4) != 0\n        zsv_ext0 = zsv_ext1 = zsv_ext2 = zsb + 1\n        dz_ext0 = (dz0 - 1) - (2 * SQUISH_CONSTANT_4D)\n        dz_ext1 = dz_ext2 = (dz0 - 1) - (3 * SQUISH_CONSTANT_4D)\n        if (c & 3) != 0\n          zsv_ext2 = zsv_ext2 + 1\n          dz_ext2 = dz_ext2 - 1\n        else\n          zsv_ext1 = zsv_ext1 + 1\n          dz_ext1 = dz_ext1 - 1\n        end\n      else\n        zsv_ext0 = zsv_ext1 = zsv_ext2 = zsb\n        dz_ext0 = dz0 - (2 * SQUISH_CONSTANT_4D)\n        dz_ext1 = dz_ext2 = dz0 - (3 * SQUISH_CONSTANT_4D)\n      end\n      if (c & 8) != 0\n        wsv_ext0 = wsv_ext1 = wsb + 1\n        wsv_ext2 = wsb + 2\n        dw_ext0 = (dw0 - 1) - (2 * SQUISH_CONSTANT_4D)\n        dw_ext1 = (dw0 - 1) - (3 * SQUISH_CONSTANT_4D)\n        dw_ext2 = (dw0 - 2) - (3 * SQUISH_CONSTANT_4D)\n      else\n        wsv_ext0 = wsv_ext1 = wsv_ext2 = wsb\n        dw_ext0 = dw0 - (2 * SQUISH_CONSTANT_4D)\n        dw_ext1 = dw_ext2 = dw0 - (3 * SQUISH_CONSTANT_4D)\n      end\n    end\n    dx4 = (dx0 - 1) - (3 * SQUISH_CONSTANT_4D)\n    dy4 = (dy0 - 1) - (3 * SQUISH_CONSTANT_4D)\n    dz4 = (dz0 - 1) - (3 * SQUISH_CONSTANT_4D)\n    dw4 = dw0 - (3 * SQUISH_CONSTANT_4D)\n    attn4 = (((2 - (dx4 * dx4)) - (dy4 * dy4)) - (dz4 * dz4)) - (dw4 * dw4)\n    if attn4 > 0\n      attn4 = attn4 * attn4\n      value = value + ((attn4 * attn4) * (extrapolate(xsb + 1, ysb + 1, zsb + 1, wsb + 0, dx4, dy4, dz4, dw4)))\n    end\n    dx3 = dx4\n    dy3 = dy4\n    dz3 = dz0 - (3 * SQUISH_CONSTANT_4D)\n    dw3 = (dw0 - 1) - (3 * SQUISH_CONSTANT_4D)\n    attn3 = (((2 - (dx3 * dx3)) - (dy3 * dy3)) - (dz3 * dz3)) - (dw3 * dw3)\n    if attn3 > 0\n      attn3 = attn3 * attn3\n      value = value + ((attn3 * attn3) * (extrapolate(xsb + 1, ysb + 1, zsb + 0, wsb + 1, dx3, dy3, dz3, dw3)))\n    end\n    dx2 = dx4\n    dy2 = dy0 - (3 * SQUISH_CONSTANT_4D)\n    dz2 = dz4\n    dw2 = dw3\n    attn2 = (((2 - (dx2 * dx2)) - (dy2 * dy2)) - (dz2 * dz2)) - (dw2 * dw2)\n    if attn2 > 0\n      attn2 = attn2 * attn2\n      value = value + ((attn2 * attn2) * (extrapolate(xsb + 1, ysb + 0, zsb + 1, wsb + 1, dx2, dy2, dz2, dw2)))\n    end\n    dx1 = dx0 - (3 * SQUISH_CONSTANT_4D)\n    dz1 = dz4\n    dy1 = dy4\n    dw1 = dw3\n    attn1 = (((2 - (dx1 * dx1)) - (dy1 * dy1)) - (dz1 * dz1)) - (dw1 * dw1)\n    if attn1 > 0\n      attn1 = attn1 * attn1\n      value = value + ((attn1 * attn1) * (extrapolate(xsb + 0, ysb + 1, zsb + 1, wsb + 1, dx1, dy1, dz1, dw1)))\n    end\n    dx0 = (dx0 - 1) - (4 * SQUISH_CONSTANT_4D)\n    dy0 = (dy0 - 1) - (4 * SQUISH_CONSTANT_4D)\n    dz0 = (dz0 - 1) - (4 * SQUISH_CONSTANT_4D)\n    dw0 = (dw0 - 1) - (4 * SQUISH_CONSTANT_4D)\n    attn0 = (((2 - (dx0 * dx0)) - (dy0 * dy0)) - (dz0 * dz0)) - (dw0 * dw0)\n    if attn0 > 0\n      attn0 = attn0 * attn0\n      value = value + ((attn0 * attn0) * (extrapolate(xsb + 1, ysb + 1, zsb + 1, wsb + 1, dx0, dy0, dz0, dw0)))\n    end\n  else\n    if in_sum <= 2\n      a_is_bigger_side = true\n      b_is_bigger_side = true\n      if (xins + yins) > (zins + wins)\n        a_score = xins + yins\n        a_po = 3\n      else\n        a_score = zins + wins\n        a_po = 12\n      end\n      if (xins + zins) > (yins + wins)\n        b_score = xins + zins\n        b_po = 5\n      else\n        b_score = yins + wins\n        b_po = 10\n      end\n      if (xins + wins) > (yins + zins)\n        score = xins + wins\n        if a_score >= b_score && score > b_score\n          b_score = score\n          b_po = 9\n        else\n          if a_score < b_score && score > a_score\n            a_score = score\n            a_po = 9\n          end\n        end\n      else\n        score = yins + zins\n        if a_score >= b_score && score > b_score\n          b_score = score\n          b_po = 6\n        else\n          if a_score < b_score && score > a_score\n            a_score = score\n            a_po = 6\n          end\n        end\n      end\n      p1 = (2 - in_sum) + xins\n      if a_score >= b_score && p1 > b_score\n        b_score = p1\n        b_po = 1\n        b_is_bigger_side = false\n      else\n        if a_score < b_score && p1 > a_score\n          a_score = p1\n          a_po = 1\n          a_is_bigger_side = false\n        end\n      end\n      p2 = (2 - in_sum) + yins\n      if a_score >= b_score && p2 > b_score\n        b_score = p2\n        b_po = 2\n        b_is_bigger_side = false\n      else\n        if a_score < b_score && p2 > a_score\n          a_score = p2\n          a_po = 2\n          a_is_bigger_side = false\n        end\n      end\n      p3 = (2 - in_sum) + zins\n      if a_score >= b_score && p3 > b_score\n        b_score = p3\n        b_po = 4\n        b_is_bigger_side = false\n      else\n        if a_score < b_score && p3 > a_score\n          a_score = p3\n          a_po = 4\n          a_is_bigger_side = false\n        end\n      end\n      p4 = (2 - in_sum) + wins\n      if a_score >= b_score && p4 > b_score\n        b_po = 8\n        b_is_bigger_side = false\n      else\n        if a_score < b_score && p4 > a_score\n          a_po = 8\n          a_is_bigger_side = false\n        end\n      end\n      if a_is_bigger_side == b_is_bigger_side\n        if a_is_bigger_side\n          c1 = (a_po | b_po)\n          c2 = (a_po & b_po)\n          if (c1 & 1) == 0\n            xsv_ext0 = xsb\n            xsv_ext1 = xsb - 1\n            dx_ext0 = dx0 - (3 * SQUISH_CONSTANT_4D)\n            dx_ext1 = (dx0 + 1) - (2 * SQUISH_CONSTANT_4D)\n          else\n            xsv_ext0 = xsv_ext1 = xsb + 1\n            dx_ext0 = (dx0 - 1) - (3 * SQUISH_CONSTANT_4D)\n            dx_ext1 = (dx0 - 1) - (2 * SQUISH_CONSTANT_4D)\n          end\n          if (c1 & 2) == 0\n            ysv_ext0 = ysb\n            ysv_ext1 = ysb - 1\n            dy_ext0 = dy0 - (3 * SQUISH_CONSTANT_4D)\n            dy_ext1 = (dy0 + 1) - (2 * SQUISH_CONSTANT_4D)\n          else\n            ysv_ext0 = ysv_ext1 = ysb + 1\n            dy_ext0 = (dy0 - 1) - (3 * SQUISH_CONSTANT_4D)\n            dy_ext1 = (dy0 - 1) - (2 * SQUISH_CONSTANT_4D)\n          end\n          if (c1 & 4) == 0\n            zsv_ext0 = zsb\n            zsv_ext1 = zsb - 1\n            dz_ext0 = dz0 - (3 * SQUISH_CONSTANT_4D)\n            dz_ext1 = (dz0 + 1) - (2 * SQUISH_CONSTANT_4D)\n          else\n            zsv_ext0 = zsv_ext1 = zsb + 1\n            dz_ext0 = (dz0 - 1) - (3 * SQUISH_CONSTANT_4D)\n            dz_ext1 = (dz0 - 1) - (2 * SQUISH_CONSTANT_4D)\n          end\n          if (c1 & 8) == 0\n            wsv_ext0 = wsb\n            wsv_ext1 = wsb - 1\n            dw_ext0 = dw0 - (3 * SQUISH_CONSTANT_4D)\n            dw_ext1 = (dw0 + 1) - (2 * SQUISH_CONSTANT_4D)\n          else\n            wsv_ext0 = wsv_ext1 = wsb + 1\n            dw_ext0 = (dw0 - 1) - (3 * SQUISH_CONSTANT_4D)\n            dw_ext1 = (dw0 - 1) - (2 * SQUISH_CONSTANT_4D)\n          end\n          xsv_ext2 = xsb\n          ysv_ext2 = ysb\n          zsv_ext2 = zsb\n          wsv_ext2 = wsb\n          dx_ext2 = dx0 - (2 * SQUISH_CONSTANT_4D)\n          dy_ext2 = dy0 - (2 * SQUISH_CONSTANT_4D)\n          dz_ext2 = dz0 - (2 * SQUISH_CONSTANT_4D)\n          dw_ext2 = dw0 - (2 * SQUISH_CONSTANT_4D)\n          if (c2 & 1) != 0\n            xsv_ext2 = xsv_ext2 + 2\n            dx_ext2 = dx_ext2 - 2\n          else\n            if (c2 & 2) != 0\n              ysv_ext2 = ysv_ext2 + 2\n              dy_ext2 = dy_ext2 - 2\n            else\n              if (c2 & 4) != 0\n                zsv_ext2 = zsv_ext2 + 2\n                dz_ext2 = dz_ext2 - 2\n              else\n                wsv_ext2 = wsv_ext2 + 2\n                dw_ext2 = dw_ext2 - 2\n              end\n            end\n          end\n        else\n          xsv_ext2 = xsb\n          ysv_ext2 = ysb\n          zsv_ext2 = zsb\n          wsv_ext2 = wsb\n          dx_ext2 = dx0\n          dy_ext2 = dy0\n          dz_ext2 = dz0\n          dw_ext2 = dw0\n          c = (a_po | b_po)\n          if (c & 1) == 0\n            xsv_ext0 = xsb - 1\n            xsv_ext1 = xsb\n            dx_ext0 = (dx0 + 1) - SQUISH_CONSTANT_4D\n            dx_ext1 = dx0 - SQUISH_CONSTANT_4D\n          else\n            xsv_ext0 = xsv_ext1 = xsb + 1\n            dx_ext0 = dx_ext1 = (dx0 - 1) - SQUISH_CONSTANT_4D\n          end\n          if (c & 2) == 0\n            ysv_ext0 = ysv_ext1 = ysb\n            dy_ext0 = dy_ext1 = dy0 - SQUISH_CONSTANT_4D\n            if (c & 1) == 1\n              ysv_ext0 = ysv_ext0 - 1\n              dy_ext0 = dy_ext0 + 1\n            else\n              ysv_ext1 = ysv_ext1 - 1\n              dy_ext1 = dy_ext1 + 1\n            end\n          else\n            ysv_ext0 = ysv_ext1 = ysb + 1\n            dy_ext0 = dy_ext1 = (dy0 - 1) - SQUISH_CONSTANT_4D\n          end\n          if (c & 4) == 0\n            zsv_ext0 = zsv_ext1 = zsb\n            dz_ext0 = dz_ext1 = dz0 - SQUISH_CONSTANT_4D\n            if (c & 3) == 3\n              zsv_ext0 = zsv_ext0 - 1\n              dz_ext0 = dz_ext0 + 1\n            else\n              zsv_ext1 = zsv_ext1 - 1\n              dz_ext1 = dz_ext1 + 1\n            end\n          else\n            zsv_ext0 = zsv_ext1 = zsb + 1\n            dz_ext0 = dz_ext1 = (dz0 - 1) - SQUISH_CONSTANT_4D\n          end\n          if (c & 8) == 0\n            wsv_ext0 = wsb\n            wsv_ext1 = wsb - 1\n            dw_ext0 = dw0 - SQUISH_CONSTANT_4D\n            dw_ext1 = (dw0 + 1) - SQUISH_CONSTANT_4D\n          else\n            wsv_ext0 = wsv_ext1 = wsb + 1\n            dw_ext0 = dw_ext1 = (dw0 - 1) - SQUISH_CONSTANT_4D\n          end\n        end\n      else\n        if a_is_bigger_side\n          c1 = a_po\n          c2 = b_po\n        else\n          c1 = b_po\n          c2 = a_po\n        end\n        if (c1 & 1) == 0\n          xsv_ext0 = xsb - 1\n          xsv_ext1 = xsb\n          dx_ext0 = (dx0 + 1) - SQUISH_CONSTANT_4D\n          dx_ext1 = dx0 - SQUISH_CONSTANT_4D\n        else\n          xsv_ext0 = xsv_ext1 = xsb + 1\n          dx_ext0 = dx_ext1 = (dx0 - 1) - SQUISH_CONSTANT_4D\n        end\n        if (c1 & 2) == 0\n          ysv_ext0 = ysv_ext1 = ysb\n          dy_ext0 = dy_ext1 = dy0 - SQUISH_CONSTANT_4D\n          if (c1 & 1) == 1\n            ysv_ext0 = ysv_ext0 - 1\n            dy_ext0 = dy_ext0 + 1\n          else\n            ysv_ext1 = ysv_ext1 - 1\n            dy_ext1 = dy_ext1 + 1\n          end\n        else\n          ysv_ext0 = ysv_ext1 = ysb + 1\n          dy_ext0 = dy_ext1 = (dy0 - 1) - SQUISH_CONSTANT_4D\n        end\n        if (c1 & 4) == 0\n          zsv_ext0 = zsv_ext1 = zsb\n          dz_ext0 = dz_ext1 = dz0 - SQUISH_CONSTANT_4D\n          if (c1 & 3) == 3\n            zsv_ext0 = zsv_ext0 - 1\n            dz_ext0 = dz_ext0 + 1\n          else\n            zsv_ext1 = zsv_ext1 - 1\n            dz_ext1 = dz_ext1 + 1\n          end\n        else\n          zsv_ext0 = zsv_ext1 = zsb + 1\n          dz_ext0 = dz_ext1 = (dz0 - 1) - SQUISH_CONSTANT_4D\n        end\n        if (c1 & 8) == 0\n          wsv_ext0 = wsb\n          wsv_ext1 = wsb - 1\n          dw_ext0 = dw0 - SQUISH_CONSTANT_4D\n          dw_ext1 = (dw0 + 1) - SQUISH_CONSTANT_4D\n        else\n          wsv_ext0 = wsv_ext1 = wsb + 1\n          dw_ext0 = dw_ext1 = (dw0 - 1) - SQUISH_CONSTANT_4D\n        end\n        xsv_ext2 = xsb\n        ysv_ext2 = ysb\n        zsv_ext2 = zsb\n        wsv_ext2 = wsb\n        dx_ext2 = dx0 - (2 * SQUISH_CONSTANT_4D)\n        dy_ext2 = dy0 - (2 * SQUISH_CONSTANT_4D)\n        dz_ext2 = dz0 - (2 * SQUISH_CONSTANT_4D)\n        dw_ext2 = dw0 - (2 * SQUISH_CONSTANT_4D)\n        if (c2 & 1) != 0\n          xsv_ext2 = xsv_ext2 + 2\n          dx_ext2 = dx_ext2 - 2\n        else\n          if (c2 & 2) != 0\n            ysv_ext2 = ysv_ext2 + 2\n            dy_ext2 = dy_ext2 - 2\n          else\n            if (c2 & 4) != 0\n              zsv_ext2 = zsv_ext2 + 2\n              dz_ext2 = dz_ext2 - 2\n            else\n              wsv_ext2 = wsv_ext2 + 2\n              dw_ext2 = dw_ext2 - 2\n            end\n          end\n        end\n      end\n      dx1 = (dx0 - 1) - SQUISH_CONSTANT_4D\n      dy1 = (dy0 - 0) - SQUISH_CONSTANT_4D\n      dz1 = (dz0 - 0) - SQUISH_CONSTANT_4D\n      dw1 = (dw0 - 0) - SQUISH_CONSTANT_4D\n      attn1 = (((2 - (dx1 * dx1)) - (dy1 * dy1)) - (dz1 * dz1)) - (dw1 * dw1)\n      if attn1 > 0\n        attn1 = attn1 * attn1\n        value = value + ((attn1 * attn1) * (extrapolate(xsb + 1, ysb + 0, zsb + 0, wsb + 0, dx1, dy1, dz1, dw1)))\n      end\n      dx2 = (dx0 - 0) - SQUISH_CONSTANT_4D\n      dy2 = (dy0 - 1) - SQUISH_CONSTANT_4D\n      dz2 = dz1\n      dw2 = dw1\n      attn2 = (((2 - (dx2 * dx2)) - (dy2 * dy2)) - (dz2 * dz2)) - (dw2 * dw2)\n      if attn2 > 0\n        attn2 = attn2 * attn2\n        value = value + ((attn2 * attn2) * (extrapolate(xsb + 0, ysb + 1, zsb + 0, wsb + 0, dx2, dy2, dz2, dw2)))\n      end\n      dx3 = dx2\n      dy3 = dy1\n      dz3 = (dz0 - 1) - SQUISH_CONSTANT_4D\n      dw3 = dw1\n      attn3 = (((2 - (dx3 * dx3)) - (dy3 * dy3)) - (dz3 * dz3)) - (dw3 * dw3)\n      if attn3 > 0\n        attn3 = attn3 * attn3\n        value = value + ((attn3 * attn3) * (extrapolate(xsb + 0, ysb + 0, zsb + 1, wsb + 0, dx3, dy3, dz3, dw3)))\n      end\n      dx4 = dx2\n      dy4 = dy1\n      dz4 = dz1\n      dw4 = (dw0 - 1) - SQUISH_CONSTANT_4D\n      attn4 = (((2 - (dx4 * dx4)) - (dy4 * dy4)) - (dz4 * dz4)) - (dw4 * dw4)\n      if attn4 > 0\n        attn4 = attn4 * attn4\n        value = value + ((attn4 * attn4) * (extrapolate(xsb + 0, ysb + 0, zsb + 0, wsb + 1, dx4, dy4, dz4, dw4)))\n      end\n      dx5 = (dx0 - 1) - (2 * SQUISH_CONSTANT_4D)\n      dy5 = (dy0 - 1) - (2 * SQUISH_CONSTANT_4D)\n      dz5 = (dz0 - 0) - (2 * SQUISH_CONSTANT_4D)\n      dw5 = (dw0 - 0) - (2 * SQUISH_CONSTANT_4D)\n      attn5 = (((2 - (dx5 * dx5)) - (dy5 * dy5)) - (dz5 * dz5)) - (dw5 * dw5)\n      if attn5 > 0\n        attn5 = attn5 * attn5\n        value = value + ((attn5 * attn5) * (extrapolate(xsb + 1, ysb + 1, zsb + 0, wsb + 0, dx5, dy5, dz5, dw5)))\n      end\n      dx6 = (dx0 - 1) - (2 * SQUISH_CONSTANT_4D)\n      dy6 = (dy0 - 0) - (2 * SQUISH_CONSTANT_4D)\n      dz6 = (dz0 - 1) - (2 * SQUISH_CONSTANT_4D)\n      dw6 = (dw0 - 0) - (2 * SQUISH_CONSTANT_4D)\n      attn6 = (((2 - (dx6 * dx6)) - (dy6 * dy6)) - (dz6 * dz6)) - (dw6 * dw6)\n      if attn6 > 0\n        attn6 = attn6 * attn6\n        value = value + ((attn6 * attn6) * (extrapolate(xsb + 1, ysb + 0, zsb + 1, wsb + 0, dx6, dy6, dz6, dw6)))\n      end\n      dx7 = (dx0 - 1) - (2 * SQUISH_CONSTANT_4D)\n      dy7 = (dy0 - 0) - (2 * SQUISH_CONSTANT_4D)\n      dz7 = (dz0 - 0) - (2 * SQUISH_CONSTANT_4D)\n      dw7 = (dw0 - 1) - (2 * SQUISH_CONSTANT_4D)\n      attn7 = (((2 - (dx7 * dx7)) - (dy7 * dy7)) - (dz7 * dz7)) - (dw7 * dw7)\n      if attn7 > 0\n        attn7 = attn7 * attn7\n        value = value + ((attn7 * attn7) * (extrapolate(xsb + 1, ysb + 0, zsb + 0, wsb + 1, dx7, dy7, dz7, dw7)))\n      end\n      dx8 = (dx0 - 0) - (2 * SQUISH_CONSTANT_4D)\n      dy8 = (dy0 - 1) - (2 * SQUISH_CONSTANT_4D)\n      dz8 = (dz0 - 1) - (2 * SQUISH_CONSTANT_4D)\n      dw8 = (dw0 - 0) - (2 * SQUISH_CONSTANT_4D)\n      attn8 = (((2 - (dx8 * dx8)) - (dy8 * dy8)) - (dz8 * dz8)) - (dw8 * dw8)\n      if attn8 > 0\n        attn8 = attn8 * attn8\n        value = value + ((attn8 * attn8) * (extrapolate(xsb + 0, ysb + 1, zsb + 1, wsb + 0, dx8, dy8, dz8, dw8)))\n      end\n      dx9 = (dx0 - 0) - (2 * SQUISH_CONSTANT_4D)\n      dy9 = (dy0 - 1) - (2 * SQUISH_CONSTANT_4D)\n      dz9 = (dz0 - 0) - (2 * SQUISH_CONSTANT_4D)\n      dw9 = (dw0 - 1) - (2 * SQUISH_CONSTANT_4D)\n      attn9 = (((2 - (dx9 * dx9)) - (dy9 * dy9)) - (dz9 * dz9)) - (dw9 * dw9)\n      if attn9 > 0\n        attn9 = attn9 * attn9\n        value = value + ((attn9 * attn9) * (extrapolate(xsb + 0, ysb + 1, zsb + 0, wsb + 1, dx9, dy9, dz9, dw9)))\n      end\n      dx10 = (dx0 - 0) - (2 * SQUISH_CONSTANT_4D)\n      dy10 = (dy0 - 0) - (2 * SQUISH_CONSTANT_4D)\n      dz10 = (dz0 - 1) - (2 * SQUISH_CONSTANT_4D)\n      dw10 = (dw0 - 1) - (2 * SQUISH_CONSTANT_4D)\n      attn10 = (((2 - (dx10 * dx10)) - (dy10 * dy10)) - (dz10 * dz10)) - (dw10 * dw10)\n      if attn10 > 0\n        attn10 = attn10 * attn10\n        value = value + ((attn10 * attn10) * (extrapolate(xsb + 0, ysb + 0, zsb + 1, wsb + 1, dx10, dy10, dz10, dw10)))\n      end\n    else\n      a_is_bigger_side = true\n      b_is_bigger_side = true\n      if (xins + yins) < (zins + wins)\n        a_score = xins + yins\n        a_po = 12\n      else\n        a_score = zins + wins\n        a_po = 3\n      end\n      if (xins + zins) < (yins + wins)\n        b_score = xins + zins\n        b_po = 10\n      else\n        b_score = yins + wins\n        b_po = 5\n      end\n      if (xins + wins) < (yins + zins)\n        score = xins + wins\n        if a_score <= b_score && score < b_score\n          b_score = score\n          b_po = 6\n        else\n          if a_score > b_score && score < a_score\n            a_score = score\n            a_po = 6\n          end\n        end\n      else\n        score = yins + zins\n        if a_score <= b_score && score < b_score\n          b_score = score\n          b_po = 9\n        else\n          if a_score > b_score && score < a_score\n            a_score = score\n            a_po = 9\n          end\n        end\n      end\n      p1 = (3 - in_sum) + xins\n      if a_score <= b_score && p1 < b_score\n        b_score = p1\n        b_po = 14\n        b_is_bigger_side = false\n      else\n        if a_score > b_score && p1 < a_score\n          a_score = p1\n          a_po = 14\n          a_is_bigger_side = false\n        end\n      end\n      p2 = (3 - in_sum) + yins\n      if a_score <= b_score && p2 < b_score\n        b_score = p2\n        b_po = 13\n        b_is_bigger_side = false\n      else\n        if a_score > b_score && p2 < a_score\n          a_score = p2\n          a_po = 13\n          a_is_bigger_side = false\n        end\n      end\n      p3 = (3 - in_sum) + zins\n      if a_score <= b_score && p3 < b_score\n        b_score = p3\n        b_po = 11\n        b_is_bigger_side = false\n      else\n        if a_score > b_score && p3 < a_score\n          a_score = p3\n          a_po = 11\n          a_is_bigger_side = false\n        end\n      end\n      p4 = (3 - in_sum) + wins\n      if a_score <= b_score && p4 < b_score\n        b_po = 7\n        b_is_bigger_side = false\n      else\n        if a_score > b_score && p4 < a_score\n          a_po = 7\n          a_is_bigger_side = false\n        end\n      end\n      if a_is_bigger_side == b_is_bigger_side\n        if a_is_bigger_side\n          c1 = (a_po & b_po)\n          c2 = (a_po | b_po)\n          xsv_ext0 = xsv_ext1 = xsb\n          ysv_ext0 = ysv_ext1 = ysb\n          zsv_ext0 = zsv_ext1 = zsb\n          wsv_ext0 = wsv_ext1 = wsb\n          dx_ext0 = dx0 - SQUISH_CONSTANT_4D\n          dy_ext0 = dy0 - SQUISH_CONSTANT_4D\n          dz_ext0 = dz0 - SQUISH_CONSTANT_4D\n          dw_ext0 = dw0 - SQUISH_CONSTANT_4D\n          dx_ext1 = dx0 - (2 * SQUISH_CONSTANT_4D)\n          dy_ext1 = dy0 - (2 * SQUISH_CONSTANT_4D)\n          dz_ext1 = dz0 - (2 * SQUISH_CONSTANT_4D)\n          dw_ext1 = dw0 - (2 * SQUISH_CONSTANT_4D)\n          if (c1 & 1) != 0\n            xsv_ext0 = xsv_ext0 + 1\n            dx_ext0 = dx_ext0 - 1\n            xsv_ext1 = xsv_ext1 + 2\n            dx_ext1 = dx_ext1 - 2\n          else\n            if (c1 & 2) != 0\n              ysv_ext0 = ysv_ext0 + 1\n              dy_ext0 = dy_ext0 - 1\n              ysv_ext1 = ysv_ext1 + 2\n              dy_ext1 = dy_ext1 - 2\n            else\n              if (c1 & 4) != 0\n                zsv_ext0 = zsv_ext0 + 1\n                dz_ext0 = dz_ext0 - 1\n                zsv_ext1 = zsv_ext1 + 2\n                dz_ext1 = dz_ext1 - 2\n              else\n                wsv_ext0 = wsv_ext0 + 1\n                dw_ext0 = dw_ext0 - 1\n                wsv_ext1 = wsv_ext1 + 2\n                dw_ext1 = dw_ext1 - 2\n              end\n            end\n          end\n          xsv_ext2 = xsb + 1\n          ysv_ext2 = ysb + 1\n          zsv_ext2 = zsb + 1\n          wsv_ext2 = wsb + 1\n          dx_ext2 = (dx0 - 1) - (2 * SQUISH_CONSTANT_4D)\n          dy_ext2 = (dy0 - 1) - (2 * SQUISH_CONSTANT_4D)\n          dz_ext2 = (dz0 - 1) - (2 * SQUISH_CONSTANT_4D)\n          dw_ext2 = (dw0 - 1) - (2 * SQUISH_CONSTANT_4D)\n          if (c2 & 1) == 0\n            xsv_ext2 = xsv_ext2 - 2\n            dx_ext2 = dx_ext2 + 2\n          else\n            if (c2 & 2) == 0\n              ysv_ext2 = ysv_ext2 - 2\n              dy_ext2 = dy_ext2 + 2\n            else\n              if (c2 & 4) == 0\n                zsv_ext2 = zsv_ext2 - 2\n                dz_ext2 = dz_ext2 + 2\n              else\n                wsv_ext2 = wsv_ext2 - 2\n                dw_ext2 = dw_ext2 + 2\n              end\n            end\n          end\n        else\n          xsv_ext2 = xsb + 1\n          ysv_ext2 = ysb + 1\n          zsv_ext2 = zsb + 1\n          wsv_ext2 = wsb + 1\n          dx_ext2 = (dx0 - 1) - (4 * SQUISH_CONSTANT_4D)\n          dy_ext2 = (dy0 - 1) - (4 * SQUISH_CONSTANT_4D)\n          dz_ext2 = (dz0 - 1) - (4 * SQUISH_CONSTANT_4D)\n          dw_ext2 = (dw0 - 1) - (4 * SQUISH_CONSTANT_4D)\n          c = (a_po & b_po)\n          if (c & 1) != 0\n            xsv_ext0 = xsb + 2\n            xsv_ext1 = xsb + 1\n            dx_ext0 = (dx0 - 2) - (3 * SQUISH_CONSTANT_4D)\n            dx_ext1 = (dx0 - 1) - (3 * SQUISH_CONSTANT_4D)\n          else\n            xsv_ext0 = xsv_ext1 = xsb\n            dx_ext0 = dx_ext1 = dx0 - (3 * SQUISH_CONSTANT_4D)\n          end\n          if (c & 2) != 0\n            ysv_ext0 = ysv_ext1 = ysb + 1\n            dy_ext0 = dy_ext1 = (dy0 - 1) - (3 * SQUISH_CONSTANT_4D)\n            if (c & 1) == 0\n              ysv_ext0 = ysv_ext0 + 1\n              dy_ext0 = dy_ext0 - 1\n            else\n              ysv_ext1 = ysv_ext1 + 1\n              dy_ext1 = dy_ext1 - 1\n            end\n          else\n            ysv_ext0 = ysv_ext1 = ysb\n            dy_ext0 = dy_ext1 = dy0 - (3 * SQUISH_CONSTANT_4D)\n          end\n          if (c & 4) != 0\n            zsv_ext0 = zsv_ext1 = zsb + 1\n            dz_ext0 = dz_ext1 = (dz0 - 1) - (3 * SQUISH_CONSTANT_4D)\n            if (c & 3) == 0\n              zsv_ext0 = zsv_ext0 + 1\n              dz_ext0 = dz_ext0 - 1\n            else\n              zsv_ext1 = zsv_ext1 + 1\n              dz_ext1 = dz_ext1 - 1\n            end\n          else\n            zsv_ext0 = zsv_ext1 = zsb\n            dz_ext0 = dz_ext1 = dz0 - (3 * SQUISH_CONSTANT_4D)\n          end\n          if (c & 8) != 0\n            wsv_ext0 = wsb + 1\n            wsv_ext1 = wsb + 2\n            dw_ext0 = (dw0 - 1) - (3 * SQUISH_CONSTANT_4D)\n            dw_ext1 = (dw0 - 2) - (3 * SQUISH_CONSTANT_4D)\n          else\n            wsv_ext0 = wsv_ext1 = wsb\n            dw_ext0 = dw_ext1 = dw0 - (3 * SQUISH_CONSTANT_4D)\n          end\n        end\n      else\n        if a_is_bigger_side\n          c1 = a_po\n          c2 = b_po\n        else\n          c1 = b_po\n          c2 = a_po\n        end\n        if (c1 & 1) != 0\n          xsv_ext0 = xsb + 2\n          xsv_ext1 = xsb + 1\n          dx_ext0 = (dx0 - 2) - (3 * SQUISH_CONSTANT_4D)\n          dx_ext1 = (dx0 - 1) - (3 * SQUISH_CONSTANT_4D)\n        else\n          xsv_ext0 = xsv_ext1 = xsb\n          dx_ext0 = dx_ext1 = dx0 - (3 * SQUISH_CONSTANT_4D)\n        end\n        if (c1 & 2) != 0\n          ysv_ext0 = ysv_ext1 = ysb + 1\n          dy_ext0 = dy_ext1 = (dy0 - 1) - (3 * SQUISH_CONSTANT_4D)\n          if (c1 & 1) == 0\n            ysv_ext0 = ysv_ext0 + 1\n            dy_ext0 = dy_ext0 - 1\n          else\n            ysv_ext1 = ysv_ext1 + 1\n            dy_ext1 = dy_ext1 - 1\n          end\n        else\n          ysv_ext0 = ysv_ext1 = ysb\n          dy_ext0 = dy_ext1 = dy0 - (3 * SQUISH_CONSTANT_4D)\n        end\n        if (c1 & 4) != 0\n          zsv_ext0 = zsv_ext1 = zsb + 1\n          dz_ext0 = dz_ext1 = (dz0 - 1) - (3 * SQUISH_CONSTANT_4D)\n          if (c1 & 3) == 0\n            zsv_ext0 = zsv_ext0 + 1\n            dz_ext0 = dz_ext0 - 1\n          else\n            zsv_ext1 = zsv_ext1 + 1\n            dz_ext1 = dz_ext1 - 1\n          end\n        else\n          zsv_ext0 = zsv_ext1 = zsb\n          dz_ext0 = dz_ext1 = dz0 - (3 * SQUISH_CONSTANT_4D)\n        end\n        if (c1 & 8) != 0\n          wsv_ext0 = wsb + 1\n          wsv_ext1 = wsb + 2\n          dw_ext0 = (dw0 - 1) - (3 * SQUISH_CONSTANT_4D)\n          dw_ext1 = (dw0 - 2) - (3 * SQUISH_CONSTANT_4D)\n        else\n          wsv_ext0 = wsv_ext1 = wsb\n          dw_ext0 = dw_ext1 = dw0 - (3 * SQUISH_CONSTANT_4D)\n        end\n        xsv_ext2 = xsb + 1\n        ysv_ext2 = ysb + 1\n        zsv_ext2 = zsb + 1\n        wsv_ext2 = wsb + 1\n        dx_ext2 = (dx0 - 1) - (2 * SQUISH_CONSTANT_4D)\n        dy_ext2 = (dy0 - 1) - (2 * SQUISH_CONSTANT_4D)\n        dz_ext2 = (dz0 - 1) - (2 * SQUISH_CONSTANT_4D)\n        dw_ext2 = (dw0 - 1) - (2 * SQUISH_CONSTANT_4D)\n        if (c2 & 1) == 0\n          xsv_ext2 = xsv_ext2 - 2\n          dx_ext2 = dx_ext2 + 2\n        else\n          if (c2 & 2) == 0\n            ysv_ext2 = ysv_ext2 - 2\n            dy_ext2 = dy_ext2 + 2\n          else\n            if (c2 & 4) == 0\n              zsv_ext2 = zsv_ext2 - 2\n              dz_ext2 = dz_ext2 + 2\n            else\n              wsv_ext2 = wsv_ext2 - 2\n              dw_ext2 = dw_ext2 + 2\n            end\n          end\n        end\n      end\n      dx4 = (dx0 - 1) - (3 * SQUISH_CONSTANT_4D)\n      dy4 = (dy0 - 1) - (3 * SQUISH_CONSTANT_4D)\n      dz4 = (dz0 - 1) - (3 * SQUISH_CONSTANT_4D)\n      dw4 = dw0 - (3 * SQUISH_CONSTANT_4D)\n      attn4 = (((2 - (dx4 * dx4)) - (dy4 * dy4)) - (dz4 * dz4)) - (dw4 * dw4)\n      if attn4 > 0\n        attn4 = attn4 * attn4\n        value = value + ((attn4 * attn4) * (extrapolate(xsb + 1, ysb + 1, zsb + 1, wsb + 0, dx4, dy4, dz4, dw4)))\n      end\n      dx3 = dx4\n      dy3 = dy4\n      dz3 = dz0 - (3 * SQUISH_CONSTANT_4D)\n      dw3 = (dw0 - 1) - (3 * SQUISH_CONSTANT_4D)\n      attn3 = (((2 - (dx3 * dx3)) - (dy3 * dy3)) - (dz3 * dz3)) - (dw3 * dw3)\n      if attn3 > 0\n        attn3 = attn3 * attn3\n        value = value + ((attn3 * attn3) * (extrapolate(xsb + 1, ysb + 1, zsb + 0, wsb + 1, dx3, dy3, dz3, dw3)))\n      end\n      dx2 = dx4\n      dy2 = dy0 - (3 * SQUISH_CONSTANT_4D)\n      dz2 = dz4\n      dw2 = dw3\n      attn2 = (((2 - (dx2 * dx2)) - (dy2 * dy2)) - (dz2 * dz2)) - (dw2 * dw2)\n      if attn2 > 0\n        attn2 = attn2 * attn2\n        value = value + ((attn2 * attn2) * (extrapolate(xsb + 1, ysb + 0, zsb + 1, wsb + 1, dx2, dy2, dz2, dw2)))\n      end\n      dx1 = dx0 - (3 * SQUISH_CONSTANT_4D)\n      dz1 = dz4\n      dy1 = dy4\n      dw1 = dw3\n      attn1 = (((2 - (dx1 * dx1)) - (dy1 * dy1)) - (dz1 * dz1)) - (dw1 * dw1)\n      if attn1 > 0\n        attn1 = attn1 * attn1\n        value = value + ((attn1 * attn1) * (extrapolate(xsb + 0, ysb + 1, zsb + 1, wsb + 1, dx1, dy1, dz1, dw1)))\n      end\n      dx5 = (dx0 - 1) - (2 * SQUISH_CONSTANT_4D)\n      dy5 = (dy0 - 1) - (2 * SQUISH_CONSTANT_4D)\n      dz5 = (dz0 - 0) - (2 * SQUISH_CONSTANT_4D)\n      dw5 = (dw0 - 0) - (2 * SQUISH_CONSTANT_4D)\n      attn5 = (((2 - (dx5 * dx5)) - (dy5 * dy5)) - (dz5 * dz5)) - (dw5 * dw5)\n      if attn5 > 0\n        attn5 = attn5 * attn5\n        value = value + ((attn5 * attn5) * (extrapolate(xsb + 1, ysb + 1, zsb + 0, wsb + 0, dx5, dy5, dz5, dw5)))\n      end\n      dx6 = (dx0 - 1) - (2 * SQUISH_CONSTANT_4D)\n      dy6 = (dy0 - 0) - (2 * SQUISH_CONSTANT_4D)\n      dz6 = (dz0 - 1) - (2 * SQUISH_CONSTANT_4D)\n      dw6 = (dw0 - 0) - (2 * SQUISH_CONSTANT_4D)\n      attn6 = (((2 - (dx6 * dx6)) - (dy6 * dy6)) - (dz6 * dz6)) - (dw6 * dw6)\n      if attn6 > 0\n        attn6 = attn6 * attn6\n        value = value + ((attn6 * attn6) * (extrapolate(xsb + 1, ysb + 0, zsb + 1, wsb + 0, dx6, dy6, dz6, dw6)))\n      end\n      dx7 = (dx0 - 1) - (2 * SQUISH_CONSTANT_4D)\n      dy7 = (dy0 - 0) - (2 * SQUISH_CONSTANT_4D)\n      dz7 = (dz0 - 0) - (2 * SQUISH_CONSTANT_4D)\n      dw7 = (dw0 - 1) - (2 * SQUISH_CONSTANT_4D)\n      attn7 = (((2 - (dx7 * dx7)) - (dy7 * dy7)) - (dz7 * dz7)) - (dw7 * dw7)\n      if attn7 > 0\n        attn7 = attn7 * attn7\n        value = value + ((attn7 * attn7) * (extrapolate(xsb + 1, ysb + 0, zsb + 0, wsb + 1, dx7, dy7, dz7, dw7)))\n      end\n      dx8 = (dx0 - 0) - (2 * SQUISH_CONSTANT_4D)\n      dy8 = (dy0 - 1) - (2 * SQUISH_CONSTANT_4D)\n      dz8 = (dz0 - 1) - (2 * SQUISH_CONSTANT_4D)\n      dw8 = (dw0 - 0) - (2 * SQUISH_CONSTANT_4D)\n      attn8 = (((2 - (dx8 * dx8)) - (dy8 * dy8)) - (dz8 * dz8)) - (dw8 * dw8)\n      if attn8 > 0\n        attn8 = attn8 * attn8\n        value = value + ((attn8 * attn8) * (extrapolate(xsb + 0, ysb + 1, zsb + 1, wsb + 0, dx8, dy8, dz8, dw8)))\n      end\n      dx9 = (dx0 - 0) - (2 * SQUISH_CONSTANT_4D)\n      dy9 = (dy0 - 1) - (2 * SQUISH_CONSTANT_4D)\n      dz9 = (dz0 - 0) - (2 * SQUISH_CONSTANT_4D)\n      dw9 = (dw0 - 1) - (2 * SQUISH_CONSTANT_4D)\n      attn9 = (((2 - (dx9 * dx9)) - (dy9 * dy9)) - (dz9 * dz9)) - (dw9 * dw9)\n      if attn9 > 0\n        attn9 = attn9 * attn9\n        value = value + ((attn9 * attn9) * (extrapolate(xsb + 0, ysb + 1, zsb + 0, wsb + 1, dx9, dy9, dz9, dw9)))\n      end\n      dx10 = (dx0 - 0) - (2 * SQUISH_CONSTANT_4D)\n      dy10 = (dy0 - 0) - (2 * SQUISH_CONSTANT_4D)\n      dz10 = (dz0 - 1) - (2 * SQUISH_CONSTANT_4D)\n      dw10 = (dw0 - 1) - (2 * SQUISH_CONSTANT_4D)\n      attn10 = (((2 - (dx10 * dx10)) - (dy10 * dy10)) - (dz10 * dz10)) - (dw10 * dw10)\n      if attn10 > 0\n        attn10 = attn10 * attn10\n        value = value + ((attn10 * attn10) * (extrapolate(xsb + 0, ysb + 0, zsb + 1, wsb + 1, dx10, dy10, dz10, dw10)))\n      end\n    end\n  end\nend\nattn_ext0 = (((2 - (dx_ext0 * dx_ext0)) - (dy_ext0 * dy_ext0)) - (dz_ext0 * dz_ext0)) - (dw_ext0 * dw_ext0)\nif attn_ext0 > 0\n  attn_ext0 = attn_ext0 * attn_ext0\n  value = value + ((attn_ext0 * attn_ext0) * (extrapolate(xsv_ext0, ysv_ext0, zsv_ext0, wsv_ext0, dx_ext0, dy_ext0, dz_ext0, dw_ext0)))\nend\nattn_ext1 = (((2 - (dx_ext1 * dx_ext1)) - (dy_ext1 * dy_ext1)) - (dz_ext1 * dz_ext1)) - (dw_ext1 * dw_ext1)\nif attn_ext1 > 0\n  attn_ext1 = attn_ext1 * attn_ext1\n  value = value + ((attn_ext1 * attn_ext1) * (extrapolate(xsv_ext1, ysv_ext1, zsv_ext1, wsv_ext1, dx_ext1, dy_ext1, dz_ext1, dw_ext1)))\nend\nattn_ext2 = (((2 - (dx_ext2 * dx_ext2)) - (dy_ext2 * dy_ext2)) - (dz_ext2 * dz_ext2)) - (dw_ext2 * dw_ext2)\nif attn_ext2 > 0\n  attn_ext2 = attn_ext2 * attn_ext2\n  value = value + ((attn_ext2 * attn_ext2) * (extrapolate(xsv_ext2, ysv_ext2, zsv_ext2, wsv_ext2, dx_ext2, dy_ext2, dz_ext2, dw_ext2)))\nend\nvalue / NORM_CONSTANT_4D\n"}},{"id":"generate(x:Float64,y:Float64,z:Float64):Float64-instance-method","html_id":"generate(x:Float64,y:Float64,z:Float64):Float64-instance-method","name":"generate","doc":"Generate 3D OpenSimplex noise from X,Y,Z coordinates.","summary":"<p>Generate 3D OpenSimplex noise from X,Y,Z coordinates.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float64"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"Float64"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"Float64"}],"args_string":"(x : Float64, y : Float64, z : Float64) : Float64","source_link":"https://github.com/j8r/crystal-open-simplex-noise/blob/db1d122659a03713319db15b4479c679d29070bd/src/3d.cr#L11","def":{"name":"generate","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float64"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"Float64"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"stretch_offset = ((x + y) + z) * STRETCH_CONSTANT_3D\nxs = x + stretch_offset\nys = y + stretch_offset\nzs = z + stretch_offset\nxsb = xs.floor.to_i\nysb = ys.floor.to_i\nzsb = zs.floor.to_i\nsquish_offset = ((xsb + ysb) + zsb) * SQUISH_CONSTANT_3D\nxb = xsb + squish_offset\nyb = ysb + squish_offset\nzb = zsb + squish_offset\nxins = xs - xsb\nyins = ys - ysb\nzins = zs - zsb\nin_sum = (xins + yins) + zins\ndx0 = x - xb\ndy0 = y - yb\ndz0 = z - zb\nvalue = 0\nif in_sum <= 1\n  a_point = 1\n  a_score = xins\n  b_point = 2\n  b_score = yins\n  if a_score >= b_score && zins > b_score\n    b_score = zins\n    b_point = 4\n  else\n    if a_score < b_score && zins > a_score\n      a_score = zins\n      a_point = 4\n    end\n  end\n  wins = 1 - in_sum\n  if wins > a_score || wins > b_score\n    c = b_score > a_score ? b_point : a_point\n    if (c & 1) == 0\n      xsv_ext0 = xsb - 1\n      xsv_ext1 = xsb\n      dx_ext0 = dx0 + 1\n      dx_ext1 = dx0\n    else\n      xsv_ext0 = xsv_ext1 = xsb + 1\n      dx_ext0 = dx_ext1 = dx0 - 1\n    end\n    if (c & 2) == 0\n      ysv_ext0 = ysv_ext1 = ysb\n      dy_ext0 = dy_ext1 = dy0\n      if (c & 1) == 0\n        ysv_ext1 = ysv_ext1 - 1\n        dy_ext1 = dy_ext1 + 1\n      else\n        ysv_ext0 = ysv_ext0 - 1\n        dy_ext0 = dy_ext0 + 1\n      end\n    else\n      ysv_ext0 = ysv_ext1 = ysb + 1\n      dy_ext0 = dy_ext1 = dy0 - 1\n    end\n    if (c & 4) == 0\n      zsv_ext0 = zsb\n      zsv_ext1 = zsb - 1\n      dz_ext0 = dz0\n      dz_ext1 = dz0 + 1\n    else\n      zsv_ext0 = zsv_ext1 = zsb + 1\n      dz_ext0 = dz_ext1 = dz0 - 1\n    end\n  else\n    c = (a_point | b_point)\n    if (c & 1) == 0\n      xsv_ext0 = xsb\n      xsv_ext1 = xsb - 1\n      dx_ext0 = dx0 - (2 * SQUISH_CONSTANT_3D)\n      dx_ext1 = (dx0 + 1) - SQUISH_CONSTANT_3D\n    else\n      xsv_ext0 = xsv_ext1 = xsb + 1\n      dx_ext0 = (dx0 - 1) - (2 * SQUISH_CONSTANT_3D)\n      dx_ext1 = (dx0 - 1) - SQUISH_CONSTANT_3D\n    end\n    if (c & 2) == 0\n      ysv_ext0 = ysb\n      ysv_ext1 = ysb - 1\n      dy_ext0 = dy0 - (2 * SQUISH_CONSTANT_3D)\n      dy_ext1 = (dy0 + 1) - SQUISH_CONSTANT_3D\n    else\n      ysv_ext0 = ysv_ext1 = ysb + 1\n      dy_ext0 = (dy0 - 1) - (2 * SQUISH_CONSTANT_3D)\n      dy_ext1 = (dy0 - 1) - SQUISH_CONSTANT_3D\n    end\n    if (c & 4) == 0\n      zsv_ext0 = zsb\n      zsv_ext1 = zsb - 1\n      dz_ext0 = dz0 - (2 * SQUISH_CONSTANT_3D)\n      dz_ext1 = (dz0 + 1) - SQUISH_CONSTANT_3D\n    else\n      zsv_ext0 = zsv_ext1 = zsb + 1\n      dz_ext0 = (dz0 - 1) - (2 * SQUISH_CONSTANT_3D)\n      dz_ext1 = (dz0 - 1) - SQUISH_CONSTANT_3D\n    end\n  end\n  attn0 = ((2 - (dx0 * dx0)) - (dy0 * dy0)) - (dz0 * dz0)\n  if attn0 > 0\n    attn0 = attn0 * attn0\n    value = value + ((attn0 * attn0) * (extrapolate(xsb + 0, ysb + 0, zsb + 0, dx0, dy0, dz0)))\n  end\n  dx1 = (dx0 - 1) - SQUISH_CONSTANT_3D\n  dy1 = (dy0 - 0) - SQUISH_CONSTANT_3D\n  dz1 = (dz0 - 0) - SQUISH_CONSTANT_3D\n  attn1 = ((2 - (dx1 * dx1)) - (dy1 * dy1)) - (dz1 * dz1)\n  if attn1 > 0\n    attn1 = attn1 * attn1\n    value = value + ((attn1 * attn1) * (extrapolate(xsb + 1, ysb + 0, zsb + 0, dx1, dy1, dz1)))\n  end\n  dx2 = (dx0 - 0) - SQUISH_CONSTANT_3D\n  dy2 = (dy0 - 1) - SQUISH_CONSTANT_3D\n  dz2 = dz1\n  attn2 = ((2 - (dx2 * dx2)) - (dy2 * dy2)) - (dz2 * dz2)\n  if attn2 > 0\n    attn2 = attn2 * attn2\n    value = value + ((attn2 * attn2) * (extrapolate(xsb + 0, ysb + 1, zsb + 0, dx2, dy2, dz2)))\n  end\n  dx3 = dx2\n  dy3 = dy1\n  dz3 = (dz0 - 1) - SQUISH_CONSTANT_3D\n  attn3 = ((2 - (dx3 * dx3)) - (dy3 * dy3)) - (dz3 * dz3)\n  if attn3 > 0\n    attn3 = attn3 * attn3\n    value = value + ((attn3 * attn3) * (extrapolate(xsb + 0, ysb + 0, zsb + 1, dx3, dy3, dz3)))\n  end\nelse\n  if in_sum >= 2\n    a_point = 6\n    a_score = xins\n    b_point = 5\n    b_score = yins\n    if a_score <= b_score && zins < b_score\n      b_score = zins\n      b_point = 3\n    else\n      if a_score > b_score && zins < a_score\n        a_score = zins\n        a_point = 3\n      end\n    end\n    wins = 3 - in_sum\n    if wins < a_score || wins < b_score\n      c = b_score < a_score ? b_point : a_point\n      if (c & 1) != 0\n        xsv_ext0 = xsb + 2\n        xsv_ext1 = xsb + 1\n        dx_ext0 = (dx0 - 2) - (3 * SQUISH_CONSTANT_3D)\n        dx_ext1 = (dx0 - 1) - (3 * SQUISH_CONSTANT_3D)\n      else\n        xsv_ext0 = xsv_ext1 = xsb\n        dx_ext0 = dx_ext1 = dx0 - (3 * SQUISH_CONSTANT_3D)\n      end\n      if (c & 2) != 0\n        ysv_ext0 = ysv_ext1 = ysb + 1\n        dy_ext0 = dy_ext1 = (dy0 - 1) - (3 * SQUISH_CONSTANT_3D)\n        if (c & 1) != 0\n          ysv_ext1 = ysv_ext1 + 1\n          dy_ext1 = dy_ext1 - 1\n        else\n          ysv_ext0 = ysv_ext0 + 1\n          dy_ext0 = dy_ext0 - 1\n        end\n      else\n        ysv_ext0 = ysv_ext1 = ysb\n        dy_ext0 = dy_ext1 = dy0 - (3 * SQUISH_CONSTANT_3D)\n      end\n      if (c & 4) != 0\n        zsv_ext0 = zsb + 1\n        zsv_ext1 = zsb + 2\n        dz_ext0 = (dz0 - 1) - (3 * SQUISH_CONSTANT_3D)\n        dz_ext1 = (dz0 - 2) - (3 * SQUISH_CONSTANT_3D)\n      else\n        zsv_ext0 = zsv_ext1 = zsb\n        dz_ext0 = dz_ext1 = dz0 - (3 * SQUISH_CONSTANT_3D)\n      end\n    else\n      c = (a_point & b_point)\n      if (c & 1) != 0\n        xsv_ext0 = xsb + 1\n        xsv_ext1 = xsb + 2\n        dx_ext0 = (dx0 - 1) - SQUISH_CONSTANT_3D\n        dx_ext1 = (dx0 - 2) - (2 * SQUISH_CONSTANT_3D)\n      else\n        xsv_ext0 = xsv_ext1 = xsb\n        dx_ext0 = dx0 - SQUISH_CONSTANT_3D\n        dx_ext1 = dx0 - (2 * SQUISH_CONSTANT_3D)\n      end\n      if (c & 2) != 0\n        ysv_ext0 = ysb + 1\n        ysv_ext1 = ysb + 2\n        dy_ext0 = (dy0 - 1) - SQUISH_CONSTANT_3D\n        dy_ext1 = (dy0 - 2) - (2 * SQUISH_CONSTANT_3D)\n      else\n        ysv_ext0 = ysv_ext1 = ysb\n        dy_ext0 = dy0 - SQUISH_CONSTANT_3D\n        dy_ext1 = dy0 - (2 * SQUISH_CONSTANT_3D)\n      end\n      if (c & 4) != 0\n        zsv_ext0 = zsb + 1\n        zsv_ext1 = zsb + 2\n        dz_ext0 = (dz0 - 1) - SQUISH_CONSTANT_3D\n        dz_ext1 = (dz0 - 2) - (2 * SQUISH_CONSTANT_3D)\n      else\n        zsv_ext0 = zsv_ext1 = zsb\n        dz_ext0 = dz0 - SQUISH_CONSTANT_3D\n        dz_ext1 = dz0 - (2 * SQUISH_CONSTANT_3D)\n      end\n    end\n    dx3 = (dx0 - 1) - (2 * SQUISH_CONSTANT_3D)\n    dy3 = (dy0 - 1) - (2 * SQUISH_CONSTANT_3D)\n    dz3 = (dz0 - 0) - (2 * SQUISH_CONSTANT_3D)\n    attn3 = ((2 - (dx3 * dx3)) - (dy3 * dy3)) - (dz3 * dz3)\n    if attn3 > 0\n      attn3 = attn3 * attn3\n      value = value + ((attn3 * attn3) * (extrapolate(xsb + 1, ysb + 1, zsb + 0, dx3, dy3, dz3)))\n    end\n    dx2 = dx3\n    dy2 = (dy0 - 0) - (2 * SQUISH_CONSTANT_3D)\n    dz2 = (dz0 - 1) - (2 * SQUISH_CONSTANT_3D)\n    attn2 = ((2 - (dx2 * dx2)) - (dy2 * dy2)) - (dz2 * dz2)\n    if attn2 > 0\n      attn2 = attn2 * attn2\n      value = value + ((attn2 * attn2) * (extrapolate(xsb + 1, ysb + 0, zsb + 1, dx2, dy2, dz2)))\n    end\n    dx1 = (dx0 - 0) - (2 * SQUISH_CONSTANT_3D)\n    dy1 = dy3\n    dz1 = dz2\n    attn1 = ((2 - (dx1 * dx1)) - (dy1 * dy1)) - (dz1 * dz1)\n    if attn1 > 0\n      attn1 = attn1 * attn1\n      value = value + ((attn1 * attn1) * (extrapolate(xsb + 0, ysb + 1, zsb + 1, dx1, dy1, dz1)))\n    end\n    dx0 = (dx0 - 1) - (3 * SQUISH_CONSTANT_3D)\n    dy0 = (dy0 - 1) - (3 * SQUISH_CONSTANT_3D)\n    dz0 = (dz0 - 1) - (3 * SQUISH_CONSTANT_3D)\n    attn0 = ((2 - (dx0 * dx0)) - (dy0 * dy0)) - (dz0 * dz0)\n    if attn0 > 0\n      attn0 = attn0 * attn0\n      value = value + ((attn0 * attn0) * (extrapolate(xsb + 1, ysb + 1, zsb + 1, dx0, dy0, dz0)))\n    end\n  else\n    p1 = xins + yins\n    if p1 > 1\n      a_score = p1 - 1\n      a_point = 3\n      a_is_further_side = true\n    else\n      a_score = 1 - p1\n      a_point = 4\n      a_is_further_side = false\n    end\n    p2 = xins + zins\n    if p2 > 1\n      b_score = p2 - 1\n      b_point = 5\n      b_is_further_side = true\n    else\n      b_score = 1 - p2\n      b_point = 2\n      b_is_further_side = false\n    end\n    p3 = yins + zins\n    if p3 > 1\n      score = p3 - 1\n      if a_score <= b_score && a_score < score\n        a_point = 6\n        a_is_further_side = true\n      else\n        if a_score > b_score && b_score < score\n          b_point = 6\n          b_is_further_side = true\n        end\n      end\n    else\n      score = 1 - p3\n      if a_score <= b_score && a_score < score\n        a_point = 1\n        a_is_further_side = false\n      else\n        if a_score > b_score && b_score < score\n          b_point = 1\n          b_is_further_side = false\n        end\n      end\n    end\n    if a_is_further_side == b_is_further_side\n      if a_is_further_side\n        dx_ext0 = (dx0 - 1) - (3 * SQUISH_CONSTANT_3D)\n        dy_ext0 = (dy0 - 1) - (3 * SQUISH_CONSTANT_3D)\n        dz_ext0 = (dz0 - 1) - (3 * SQUISH_CONSTANT_3D)\n        xsv_ext0 = xsb + 1\n        ysv_ext0 = ysb + 1\n        zsv_ext0 = zsb + 1\n        c = (a_point & b_point)\n        if (c & 1) != 0\n          dx_ext1 = (dx0 - 2) - (2 * SQUISH_CONSTANT_3D)\n          dy_ext1 = dy0 - (2 * SQUISH_CONSTANT_3D)\n          dz_ext1 = dz0 - (2 * SQUISH_CONSTANT_3D)\n          xsv_ext1 = xsb + 2\n          ysv_ext1 = ysb\n          zsv_ext1 = zsb\n        else\n          if (c & 2) != 0\n            dx_ext1 = dx0 - (2 * SQUISH_CONSTANT_3D)\n            dy_ext1 = (dy0 - 2) - (2 * SQUISH_CONSTANT_3D)\n            dz_ext1 = dz0 - (2 * SQUISH_CONSTANT_3D)\n            xsv_ext1 = xsb\n            ysv_ext1 = ysb + 2\n            zsv_ext1 = zsb\n          else\n            dx_ext1 = dx0 - (2 * SQUISH_CONSTANT_3D)\n            dy_ext1 = dy0 - (2 * SQUISH_CONSTANT_3D)\n            dz_ext1 = (dz0 - 2) - (2 * SQUISH_CONSTANT_3D)\n            xsv_ext1 = xsb\n            ysv_ext1 = ysb\n            zsv_ext1 = zsb + 2\n          end\n        end\n      else\n        dx_ext0 = dx0\n        dy_ext0 = dy0\n        dz_ext0 = dz0\n        xsv_ext0 = xsb\n        ysv_ext0 = ysb\n        zsv_ext0 = zsb\n        c = (a_point | b_point)\n        if (c & 1) == 0\n          dx_ext1 = (dx0 + 1) - SQUISH_CONSTANT_3D\n          dy_ext1 = (dy0 - 1) - SQUISH_CONSTANT_3D\n          dz_ext1 = (dz0 - 1) - SQUISH_CONSTANT_3D\n          xsv_ext1 = xsb - 1\n          ysv_ext1 = ysb + 1\n          zsv_ext1 = zsb + 1\n        else\n          if (c & 2) == 0\n            dx_ext1 = (dx0 - 1) - SQUISH_CONSTANT_3D\n            dy_ext1 = (dy0 + 1) - SQUISH_CONSTANT_3D\n            dz_ext1 = (dz0 - 1) - SQUISH_CONSTANT_3D\n            xsv_ext1 = xsb + 1\n            ysv_ext1 = ysb - 1\n            zsv_ext1 = zsb + 1\n          else\n            dx_ext1 = (dx0 - 1) - SQUISH_CONSTANT_3D\n            dy_ext1 = (dy0 - 1) - SQUISH_CONSTANT_3D\n            dz_ext1 = (dz0 + 1) - SQUISH_CONSTANT_3D\n            xsv_ext1 = xsb + 1\n            ysv_ext1 = ysb + 1\n            zsv_ext1 = zsb - 1\n          end\n        end\n      end\n    else\n      if a_is_further_side\n        c1 = a_point\n        c2 = b_point\n      else\n        c1 = b_point\n        c2 = a_point\n      end\n      if (c1 & 1) == 0\n        dx_ext0 = (dx0 + 1) - SQUISH_CONSTANT_3D\n        dy_ext0 = (dy0 - 1) - SQUISH_CONSTANT_3D\n        dz_ext0 = (dz0 - 1) - SQUISH_CONSTANT_3D\n        xsv_ext0 = xsb - 1\n        ysv_ext0 = ysb + 1\n        zsv_ext0 = zsb + 1\n      else\n        if (c1 & 2) == 0\n          dx_ext0 = (dx0 - 1) - SQUISH_CONSTANT_3D\n          dy_ext0 = (dy0 + 1) - SQUISH_CONSTANT_3D\n          dz_ext0 = (dz0 - 1) - SQUISH_CONSTANT_3D\n          xsv_ext0 = xsb + 1\n          ysv_ext0 = ysb - 1\n          zsv_ext0 = zsb + 1\n        else\n          dx_ext0 = (dx0 - 1) - SQUISH_CONSTANT_3D\n          dy_ext0 = (dy0 - 1) - SQUISH_CONSTANT_3D\n          dz_ext0 = (dz0 + 1) - SQUISH_CONSTANT_3D\n          xsv_ext0 = xsb + 1\n          ysv_ext0 = ysb + 1\n          zsv_ext0 = zsb - 1\n        end\n      end\n      dx_ext1 = dx0 - (2 * SQUISH_CONSTANT_3D)\n      dy_ext1 = dy0 - (2 * SQUISH_CONSTANT_3D)\n      dz_ext1 = dz0 - (2 * SQUISH_CONSTANT_3D)\n      xsv_ext1 = xsb\n      ysv_ext1 = ysb\n      zsv_ext1 = zsb\n      if (c2 & 1) != 0\n        dx_ext1 = dx_ext1 - 2\n        xsv_ext1 = xsv_ext1 + 2\n      else\n        if (c2 & 2) != 0\n          dy_ext1 = dy_ext1 - 2\n          ysv_ext1 = ysv_ext1 + 2\n        else\n          dz_ext1 = dz_ext1 - 2\n          zsv_ext1 = zsv_ext1 + 2\n        end\n      end\n    end\n    dx1 = (dx0 - 1) - SQUISH_CONSTANT_3D\n    dy1 = (dy0 - 0) - SQUISH_CONSTANT_3D\n    dz1 = (dz0 - 0) - SQUISH_CONSTANT_3D\n    attn1 = ((2 - (dx1 * dx1)) - (dy1 * dy1)) - (dz1 * dz1)\n    if attn1 > 0\n      attn1 = attn1 * attn1\n      value = value + ((attn1 * attn1) * (extrapolate(xsb + 1, ysb + 0, zsb + 0, dx1, dy1, dz1)))\n    end\n    dx2 = (dx0 - 0) - SQUISH_CONSTANT_3D\n    dy2 = (dy0 - 1) - SQUISH_CONSTANT_3D\n    dz2 = dz1\n    attn2 = ((2 - (dx2 * dx2)) - (dy2 * dy2)) - (dz2 * dz2)\n    if attn2 > 0\n      attn2 = attn2 * attn2\n      value = value + ((attn2 * attn2) * (extrapolate(xsb + 0, ysb + 1, zsb + 0, dx2, dy2, dz2)))\n    end\n    dx3 = dx2\n    dy3 = dy1\n    dz3 = (dz0 - 1) - SQUISH_CONSTANT_3D\n    attn3 = ((2 - (dx3 * dx3)) - (dy3 * dy3)) - (dz3 * dz3)\n    if attn3 > 0\n      attn3 = attn3 * attn3\n      value = value + ((attn3 * attn3) * (extrapolate(xsb + 0, ysb + 0, zsb + 1, dx3, dy3, dz3)))\n    end\n    dx4 = (dx0 - 1) - (2 * SQUISH_CONSTANT_3D)\n    dy4 = (dy0 - 1) - (2 * SQUISH_CONSTANT_3D)\n    dz4 = (dz0 - 0) - (2 * SQUISH_CONSTANT_3D)\n    attn4 = ((2 - (dx4 * dx4)) - (dy4 * dy4)) - (dz4 * dz4)\n    if attn4 > 0\n      attn4 = attn4 * attn4\n      value = value + ((attn4 * attn4) * (extrapolate(xsb + 1, ysb + 1, zsb + 0, dx4, dy4, dz4)))\n    end\n    dx5 = dx4\n    dy5 = (dy0 - 0) - (2 * SQUISH_CONSTANT_3D)\n    dz5 = (dz0 - 1) - (2 * SQUISH_CONSTANT_3D)\n    attn5 = ((2 - (dx5 * dx5)) - (dy5 * dy5)) - (dz5 * dz5)\n    if attn5 > 0\n      attn5 = attn5 * attn5\n      value = value + ((attn5 * attn5) * (extrapolate(xsb + 1, ysb + 0, zsb + 1, dx5, dy5, dz5)))\n    end\n    dx6 = (dx0 - 0) - (2 * SQUISH_CONSTANT_3D)\n    dy6 = dy4\n    dz6 = dz5\n    attn6 = ((2 - (dx6 * dx6)) - (dy6 * dy6)) - (dz6 * dz6)\n    if attn6 > 0\n      attn6 = attn6 * attn6\n      value = value + ((attn6 * attn6) * (extrapolate(xsb + 0, ysb + 1, zsb + 1, dx6, dy6, dz6)))\n    end\n  end\nend\nattn_ext0 = ((2 - (dx_ext0 * dx_ext0)) - (dy_ext0 * dy_ext0)) - (dz_ext0 * dz_ext0)\nif attn_ext0 > 0\n  attn_ext0 = attn_ext0 * attn_ext0\n  value = value + ((attn_ext0 * attn_ext0) * (extrapolate(xsv_ext0, ysv_ext0, zsv_ext0, dx_ext0, dy_ext0, dz_ext0)))\nend\nattn_ext1 = ((2 - (dx_ext1 * dx_ext1)) - (dy_ext1 * dy_ext1)) - (dz_ext1 * dz_ext1)\nif attn_ext1 > 0\n  attn_ext1 = attn_ext1 * attn_ext1\n  value = value + ((attn_ext1 * attn_ext1) * (extrapolate(xsv_ext1, ysv_ext1, zsv_ext1, dx_ext1, dy_ext1, dz_ext1)))\nend\nvalue / NORM_CONSTANT_3D\n"}},{"id":"generate(x:Float64,y:Float64):Float64-instance-method","html_id":"generate(x:Float64,y:Float64):Float64-instance-method","name":"generate","doc":"Generate 2D OpenSimplex noise from X,Y coordinates.","summary":"<p>Generate 2D OpenSimplex noise from X,Y coordinates.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float64"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"Float64"}],"args_string":"(x : Float64, y : Float64) : Float64","source_link":"https://github.com/j8r/crystal-open-simplex-noise/blob/db1d122659a03713319db15b4479c679d29070bd/src/2d.cr#L11","def":{"name":"generate","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float64"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"stretch_offset = (x + y) * STRETCH_CONSTANT_2D\nxs = x + stretch_offset\nys = y + stretch_offset\nxsb = xs.floor.to_i\nysb = ys.floor.to_i\nsquish_offset = (xsb + ysb) * SQUISH_CONSTANT_2D\nxb = xsb + squish_offset\nyb = ysb + squish_offset\nxins = xs - xsb\nyins = ys - ysb\nin_sum = xins + yins\ndx0 = x - xb\ndy0 = y - yb\nvalue = 0\ndx1 = (dx0 - 1) - SQUISH_CONSTANT_2D\ndy1 = (dy0 - 0) - SQUISH_CONSTANT_2D\nattn1 = (2 - (dx1 * dx1)) - (dy1 * dy1)\nif attn1 > 0\n  attn1 = attn1 * attn1\n  value = value + ((attn1 * attn1) * (extrapolate(xsb + 1, ysb + 0, dx1, dy1)))\nend\ndx2 = (dx0 - 0) - SQUISH_CONSTANT_2D\ndy2 = (dy0 - 1) - SQUISH_CONSTANT_2D\nattn2 = (2 - (dx2 * dx2)) - (dy2 * dy2)\nif attn2 > 0\n  attn2 = attn2 * attn2\n  value = value + ((attn2 * attn2) * (extrapolate(xsb + 0, ysb + 1, dx2, dy2)))\nend\nif in_sum <= 1\n  zins = 1 - in_sum\n  if zins > xins || zins > yins\n    if xins > yins\n      xsv_ext = xsb + 1\n      ysv_ext = ysb - 1\n      dx_ext = dx0 - 1\n      dy_ext = dy0 + 1\n    else\n      xsv_ext = xsb - 1\n      ysv_ext = ysb + 1\n      dx_ext = dx0 + 1\n      dy_ext = dy0 - 1\n    end\n  else\n    xsv_ext = xsb + 1\n    ysv_ext = ysb + 1\n    dx_ext = (dx0 - 1) - (2 * SQUISH_CONSTANT_2D)\n    dy_ext = (dy0 - 1) - (2 * SQUISH_CONSTANT_2D)\n  end\nelse\n  zins = 2 - in_sum\n  if zins < xins || zins < yins\n    if xins > yins\n      xsv_ext = xsb + 2\n      ysv_ext = ysb + 0\n      dx_ext = (dx0 - 2) - (2 * SQUISH_CONSTANT_2D)\n      dy_ext = (dy0 + 0) - (2 * SQUISH_CONSTANT_2D)\n    else\n      xsv_ext = xsb + 0\n      ysv_ext = ysb + 2\n      dx_ext = (dx0 + 0) - (2 * SQUISH_CONSTANT_2D)\n      dy_ext = (dy0 - 2) - (2 * SQUISH_CONSTANT_2D)\n    end\n  else\n    dx_ext = dx0\n    dy_ext = dy0\n    xsv_ext = xsb\n    ysv_ext = ysb\n  end\n  xsb = xsb + 1\n  ysb = ysb + 1\n  dx0 = (dx0 - 1) - (2 * SQUISH_CONSTANT_2D)\n  dy0 = (dy0 - 1) - (2 * SQUISH_CONSTANT_2D)\nend\nattn0 = (2 - (dx0 * dx0)) - (dy0 * dy0)\nif attn0 > 0\n  attn0 = attn0 * attn0\n  value = value + ((attn0 * attn0) * (extrapolate(xsb, ysb, dx0, dy0)))\nend\nattn_ext = (2 - (dx_ext * dx_ext)) - (dy_ext * dy_ext)\nif attn_ext > 0\n  attn_ext = attn_ext * attn_ext\n  value = value + ((attn_ext * attn_ext) * (extrapolate(xsv_ext, ysv_ext, dx_ext, dy_ext)))\nend\nvalue / NORM_CONSTANT_2D\n"}}],"macros":[],"types":[]}]}}